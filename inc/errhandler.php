<?php
/*
512		E_USER_WARNING  	User-generated warning message. This is like an E_WARNING, except it is generated in PHP code by using the PHP function trigger_error(). 	
1024	E_USER_NOTICE  		User-generated notice message. This is like an E_NOTICE, except it is generated in PHP code by using the PHP function trigger_error(). 	
2			E_WARNING  			Run-time warnings (non-fatal errors). Execution of the script is not halted. 	 
8			E_NOTICE  			Run-time notices. Indicate that the script encountered something that could indicate an error, but could also happen in the normal course of running a script. 	 
32		E_CORE_WARNING 		Warnings (non-fatal errors) that occur during PHP's initial startup. This is like an E_WARNING, except it is generated by the core of PHP. 	
128		E_COMPILE_WARNING  	Compile-time warnings (non-fatal errors). This is like an E_WARNING, except it is generated by the Zend Scripting Engine. 	
2048	E_STRICT  			Run-time notices. Enable to have PHP suggest changes to your code which will ensure the best interoperability and forward compatibility of your code.

256		E_USER_ERROR  		User-generated error message. This is like an E_ERROR, except it is generated in PHP code by using the PHP function trigger_error(). 	
1			E_ERROR  	 		Fatal run-time errors. These indicate errors that can not be recovered from, such as a memory allocation problem. Execution of the script is halted. 	 
4			E_PARSE  			Compile-time parse errors. Parse errors should only be generated by the parser. 	 
16		E_CORE_ERROR  		Fatal errors that occur during PHP's initial startup. This is like an E_ERROR, except it is generated by the core of PHP. 	
64		E_COMPILE_ERROR  	Fatal compile-time errors. This is like an E_ERROR, except it is generated by the Zend Scripting Engine. 	
*/

//restore_error_handler();
set_error_handler('errorHandler');

function errorHandler ($errno, $errstr, $errfile, $errline, $errcontext){

if(!empty($errno)){
	$logdir = $_SERVER['DOCUMENT_ROOT'].'/sitelog';
	if(!MakeLogDir($logdir, $mode = 0777))
		return FALSE;
}

switch ($errno){
	case E_USER_WARNING:
	case E_USER_NOTICE:

		global $cSql;

		if (eregi('^(sql)$', $errstr)) {
			$MYSQL_ERRNO = mysql_errno();
			$MYSQL_ERROR = mysql_error();
			$errstr = "MySQL error: $MYSQL_ERRNO : $MYSQL_ERROR";
			$bSql = true;
		} else {
			$bSql = false;
		}

		if(true){
			$errorstring = "<h3>" .date('Y-m-d H:i:s') ."</h3>\n";
			$errorstring .= "<p>User-generated notice message: ".$errno."</p>\n";
			if ($cSql) $errorstring .= "<p>SQL query: $cSql</p>\n";
			$errorstring .= "<p>".$errstr."</p>\n";
			if ($cSql) $errorstring .= "<p>Script: '{$_SERVER['PHP_SELF']}'.</p>\n";
			if ($bSql){
				$bEmail=true;
				if(file_exists($logdir.'/notices.php'))
					if(time()-filemtime($logdir.'/notices.php')<60*60*1)
						$bEmail=false;
				if($bEmail)
					error_log($errorstring, 1, 'jordanpani@gmail.com');
			}
			$logfile = $logdir.'/notices.php';
			error_log($errorstring, 3, $logfile);
		}
		break;


	case E_WARNING:
	case E_NOTICE:
	case E_CORE_WARNING:
	case E_COMPILE_WARNING:
	case E_STRICT:

		if(false){
			$errorstring = "<h3>" .date('Y-m-d H:i:s') ."</h3>\n";
			$errorstring .= "<p>Warning in line $errline of file '$errfile'.</p>\n";
			$errorstring .= "<p>Warning message (non-fatal error): ".$errno."</p>\n";
			$errorstring .= "<p>".$errstr."</p>\n";
			$logfile = $logdir.'/warnings.php';
			error_log($errorstring, 3, $logfile);
		}
		break;

		
	case E_USER_ERROR:
	case E_ERROR:
	case E_PARSE:
	case E_CORE_ERROR:
	case E_COMPILE_ERROR:

		global $query;

		if (eregi('^(sql)$', $errstr)) {
			$MYSQL_ERRNO = mysql_errno();
			$MYSQL_ERROR = mysql_error();
			$errstr = "MySQL error: $MYSQL_ERRNO : $MYSQL_ERROR";
		} else {
			$query = NULL;
		}

		$errorstring = "<h3>" .date('Y-m-d H:i:s') ."</h3>\n";
		$errorstring .= "<p>Fatal Error: $errstr (# $errno).</p>\n";
		if ($query) $errorstring .= "<p>SQL query: $query</p>\n";
		$errorstring .= "<p>Error in line $errline of file '$errfile'.</p>\n";
		$errorstring .= "<p>Script: '{$_SERVER['PHP_SELF']}'.</p>\n";

		if (isset($errcontext['this'])) {
			if (is_object($errcontext['this'])) {
				$classname = get_class($errcontext['this']);
				$parentclass = get_parent_class($errcontext['this']);
				$errorstring .= "<p>Object/Class: '$classname', Parent Class: '$parentclass'.</p>\n";
			}
		}

		echo "<h2>This system is temporarily unavailable</h2>\n";
		echo "<p>The following has been reported to the administrator:</p>\n";
		echo "<b><font color='red'>\n$errorstring\n</b></font>";

		$bEmail=true;
		if(file_exists($logdir.'/errors.php'))
			if(time()-filemtime($logdir.'/errors.php')>60*60*1)
				$bEmail=false;
		if($bEmail)
			error_log($errorstring, 1, 'nbosneac@appealmedia.com');

		$logfile =$logdir.'/errors.php';
		error_log($errorstring, 3, $logfile);

		session_start();
		session_unset();
		session_destroy();
		die();
		break;
		
	default:
		break;
   }
}

function MakeLogDir($dir, $mode = 0777){
  if (is_dir($dir) || @mkdir($dir,$mode)){

	} else {
		if (!MakeLogDir(dirname($dir),$mode)) 
			return FALSE;
		if(!$bIsDir){
			@mkdir($dir,$mode);
		}
	}
	$input = '<?php
include_once("../inc/dataconn.php");
include_once("../admin/checkuser.php");
if(!isset($nLog) || $nLog!=1){
header("Location: ../index.php");
exit;
}
?>
';
	$file = $dir.'/notices.php';
	if(!file_exists($file)){
		$handle = fopen($file, "w");
		if (!fwrite($handle, $input))
			return FALSE;
	}
	$file = $dir.'/warnings.php';
	if(!file_exists($file)){
		$handle = fopen($file, "w");
		if (!fwrite($handle, $input))
			return FALSE;
	}
	$file = $dir.'/errors.php';
	if(!file_exists($file)){
		$handle = fopen($file, "w");
		if (!fwrite($handle, $input))
			return FALSE;
	}
	return TRUE;
}

/*
function getIP() {
	if (!empty($_SERVER['HTTP_CLIENT_IP']))   //check ip from share internet
		$ip=$_SERVER['HTTP_CLIENT_IP'];
	elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR']))   //to check ip is pass from proxy
		$ip=$_SERVER['HTTP_X_FORWARDED_FOR'];
	elseif (!empty($_SERVER['REMOTE_ADDR']))   //to check ip is pass from proxy
		$ip=$_SERVER['REMOTE_ADDR'];
	else
		if($arh = apache_request_headers())
			$ip = $arh['PC-Remote-Addr'];
		else
			$ip = "UNKNOWN";
	return $ip;
}*/


function input_check_query($value)
{
   # mail adress(ess) for reports...
   $report_to = "nbosneac@appealmedia.com";

   # array holding strings to check...
   $suspicious_str = array
   (
       "select"
       ,"union"
       ,"script"
       ,"<body"
       ,"\\\""
		 ,"\/\*\*\/"
   );

   // remove added slashes from $value...

   $value = stripslashes($value);

   foreach($suspicious_str as $suspect)
   {
       # checks if $value contains $suspect...
	 		 $bSuspect = false;	
       if(eregi($suspect, strtolower($value)) && $suspect=="\\\""){
					if(strpos(strtolower($value),"\\\"")!==false)
				 		$bSuspect = true;	
			 }
       if(eregi($suspect, strtolower($value)) && $suspect!="\\\""){
			 		$bSuspect = true;	
			 }

       if($value=="Select A Reason" || $value=="reunion"){
			 		$bSuspect = false;
			 }

       if($bSuspect)
       {
           $ip = (empty($_SERVER['REMOTE_ADDR'])) ? 'empty' : $_SERVER['REMOTE_ADDR']; // replace this with your own get_ip function...
           $rf = (empty($_SERVER['HTTP_REFERER'])) ? 'empty' : $_SERVER['HTTP_REFERER'];
           $ua = (empty($_SERVER['HTTP_USER_AGENT'])) ? 'empty' : $_SERVER['HTTP_USER_AGENT'];
           $ru = (empty($_SERVER['REQUEST_URI'])) ? 'empty' : $_SERVER['REQUEST_URI'];
           $rm = (empty($_SERVER['REQUEST_METHOD'])) ? 'empty' : $_SERVER['REQUEST_METHOD'];

           # if so, file a report...
           if(isset($report_to) && !empty($report_to))
           {
					$vars = '';
					$marray = array_merge ($_GET, $_POST); 
					foreach($marray as $cimp => $valoare){
						$vars .= '
						'.$cimp.' = '.$valoare;
					}

               @mail
               (
                     $report_to
                   ,"[ABUSE] possible attack @ " . $_SERVER['HTTP_HOST'] . " by " . $ip
                   ,"Stopped possible attack @ " . $_SERVER['HTTP_HOST'] . " by " . $ip . " (" . date('d/m/Y H:i:s') . ")\r\n\r\n" .
                     "*** IP/HOST\r\n" . $ip . "\r\n\r\n" .
                     "*** USER AGENT\r\n" . $ua . "\r\n\r\n" .
                     "*** REFERER\r\n" . $rf . "\r\n\r\n" .
                     "*** REQUEST URI\r\n" . $ru . "\r\n\r\n" .
                     "*** REQUEST METHOD\r\n" . $rm . "\r\n\r\n" .
                     "*** SUSPECT\r\n" . $suspect . "\r\n--\r\n" . $value . "\r\n--\r\n\r\n" .
					 "*** VARIABLES" . $vars
               );
           }

           # ... and kill the script.
           die
           (
               '<center><br><br><b>Script processing cancelled:</b> Your string (`<em>'.substr($value, 0,10).'...</em>`) contains text portions that are ' .
               'potentially harmful to this server.<br><br> <em>Your input has not been sent!</em> <br><br>Please use your ' .
               'browser\'s `back`-button to return to the previous page and try refrasing your input.</center>'
           );
       }
   }
}
?>